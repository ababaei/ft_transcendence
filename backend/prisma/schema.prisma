generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  twoFaActivated  Boolean    @default(false)
  twoFaSecret     String     @default("")
  createdAt DateTime         @default(now())
  email     String           @unique
  updatedAt DateTime         @updatedAt
  avatar    String           @default("../frontend/assets/DefaultAvatar.png")
  messages  Message[]        @relation("UserMessages")
  friendsID friendRelation[] @relation("UserRelation")
  channels  Channel[]        @relation("UserChannels")
  games   Game[]              @relation("UserGames")
  player  Player[]            @relation("PlayerRelation")

  @@map("users")
}

model Channel {
  id       Int       @id @unique @default(autoincrement())
  name     String
  adminID  Int[]     @default([])
  mode     String    @default("public")
  ownerID  Int       @default(0)
  password String    @default("")
  banID    Int[]     @default([])
  muteID   Int[]     @default([])
  isDirect Boolean   @default(false)
  messages Message[] @relation("ChannelMessages")
  users    User[]    @relation("UserChannels")
}

model Message {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  text      String
  channelID Int
  userID    Int
  channel   Channel  @relation("ChannelMessages", fields: [channelID], references: [id])
  user      User     @relation("UserMessages", fields: [userID], references: [id])
}

model friendRelation {
  id        Int     @id @default(autoincrement())
  userID    Int
  friendID  Int
  convID    Int
  isBlocked Boolean @default(false)
  user      User    @relation("UserRelation", fields: [userID], references: [id])
}

model Waiting {
  id      Int      @id @default(autoincrement())
  socket  String?  @unique
  private Boolean?
}

model Player {
  id     Int     @id @default(autoincrement())
  gameID  Int
  userID  Int
  score   Int
  side    String
  game Game    @relation("gamePlayers", fields: [gameID], references: [id])
  user   User   @relation("PlayerRelation", fields: [userID], references: [id])
}

model Game {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  idWinner  Int?
  Players   Player[]   @relation("gamePlayers")
  users     User[]    @relation("UserGames")
}
